import os
import sys
import streamlit as st

# --- –£–º–Ω—ã–π FIX –¥–ª—è ChromaDB/SQLite3 –≤ –æ–±–ª–∞–∫–µ ---
if os.path.exists("/home/adminuser/venv/bin/python"):
    print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Streamlit Cloud. –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–∫—Å –¥–ª—è SQLite3.")
    try:
        __import__('pysqlite3')
        sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')
        print("–§–∏–∫—Å –¥–ª—è SQLite3 —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.")
    except ImportError:
        print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pysqlite3...")
# -----------------------------------------

import config
from src.chain import create_conversational_chain

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="AI Safety Compliance Assistant", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ AI Safety Compliance Assistant")
st.caption(f"–í–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –ú–æ–¥–µ–ª—å: {config.MODEL_NAME}")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ---
@st.cache_resource
def load_chain():
    if not os.path.exists(config.CHROMA_DB_PATH) or not os.listdir(config.CHROMA_DB_PATH):
        st.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'python index.py' –¥–ª—è –µ–µ —Å–æ–∑–¥–∞–Ω–∏—è.")
        return None
    try:
        chain = create_conversational_chain()
        return chain
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ RAG-—Ü–µ–ø–æ—á–∫–∏: {e}")
        return None

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
rag_chain = load_chain()

if rag_chain:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if "messages" not in st.session_state:
        st.session_state.messages = [{"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏?"}]

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_query := st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        st.session_state.messages.append({"role": "user", "content": user_query})
        with st.chat_message("user"):
            st.markdown(user_query)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–∏–º–∏–Ω–≥ –∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        with st.chat_message("assistant"):
            # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
            answer_placeholder = st.empty()
            sources_placeholder = st.empty()
            
            full_response = ""
            source_documents = []

            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø–æ—Ç–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ü–µ–ø–æ—á–∫–∏
            for chunk in rag_chain.stream({"question": user_query, "chat_history": st.session_state.messages}):
                # –õ–æ–≤–∏–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –∫—É—Å–æ—á–∫–∏ –æ—Ç–≤–µ—Ç–∞
                if "answer" in chunk:
                    full_response += chunk["answer"]
                    answer_placeholder.markdown(full_response + "‚ñå") # ‚ñå - —ç—Ñ—Ñ–µ–∫—Ç –∫—É—Ä—Å–æ—Ä–∞

                # –õ–æ–≤–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                if "source_documents" in chunk:
                    source_documents = chunk["source_documents"]

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –∫—É—Ä—Å–æ—Ä–∞
            answer_placeholder.markdown(full_response)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∏—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–µ
            if source_documents:
                with sources_placeholder.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏"):
                    for i, doc in enumerate(source_documents):
                        st.subheader(f"–ò—Å—Ç–æ—á–Ω–∏–∫ #{i+1}")
                        try:
                            source = doc.metadata.get('source', 'N/A').split('/')[-1]
                            page = doc.metadata.get('page', 0) + 1
                            st.write(f"**–§–∞–π–ª:** {source}, **–°—Ç—Ä–∞–Ω–∏—Ü–∞:** {page}")
                        except Exception:
                            st.write(doc.metadata) # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–µ
                        st.text(doc.page_content)
                        st.write("---")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.messages.append({"role": "assistant", "content": full_response})
else:
    st.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞, –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")