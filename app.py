import os
import sys

import streamlit as st
from dotenv import load_dotenv

# --- Fix –¥–ª—è ChromaDB/SQLite3 –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–ª–∞–∫–æ) ---
if os.path.exists("/home/adminuser/venv/bin/python"):
    __import__("pysqlite3")
    sys.modules["sqlite3"] = sys.modules.pop("pysqlite3")
# ---------------------------------------------------------------------------

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config.settings import settings
from src.final_chain import create_final_hybrid_chain
from utils.logging import logger

# MAS (multi-agent) –ø–∞–π–ø–ª–∞–π–Ω
try:
    from agents.workflow import AgentWorkflow

    MAS_AVAILABLE = True
except Exception as e:
    logger.warning(f"MAS workflow is not available: {e}")
    MAS_AVAILABLE = False

# –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è ¬´–ø–æ –∫–Ω–æ–ø–∫–µ¬ª
try:
    import index as index_module  # index.py –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å main()

    INDEX_AVAILABLE = True
except Exception as e:
    logger.warning(f"Index module not importable: {e}")
    INDEX_AVAILABLE = False

load_dotenv()

# =========================
#     PAGE CONFIG & UI
# =========================
st.set_page_config(
    page_title="AI Safety Compliance Assistant", page_icon="ü§ñ", layout="wide"
)

# –í–µ—Ä—Ö–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
left, right = st.columns([0.8, 0.2], vertical_alignment="center")
with left:
    st.title("ü§ñ AI Safety Compliance Assistant")
    st.caption("–í–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–°–ù–∏–ü, –ì–û–°–¢, –û–¢, –ü–ë).")
with right:
    st.markdown(
        f"""
        <div style="text-align:right">
            <div style="display:inline-block;padding:6px 10px;border-radius:8px;
                        background:#eef2ff;border:1px solid #c7d2fe;font-size:12px;">
                LLM: <b>{settings.LLM_PROVIDER}</b> ¬∑ <b>{settings.MODEL_NAME}</b>
            </div><br/>
            <div style="display:inline-block;margin-top:6px;padding:6px 10px;border-radius:8px;
                        background:#ecfeff;border:1px solid #a5f3fc;font-size:12px;">
                Embeddings: <b>{getattr(settings,'EMBEDDING_PROVIDER','?')}</b>
                ¬∑ <b>{getattr(settings,'EMBEDDING_MODEL_NAME','?')}</b>
            </div>
        </div>
        """,
        unsafe_allow_html=True,
    )

# =========================
#        SIDEBAR
# =========================
with st.sidebar:
    st.subheader("‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")

    # MAS toggle
    if MAS_AVAILABLE:
        mas_mode = st.toggle(
            "üîÄ MAS-—Ä–µ–∂–∏–º (Relevance ‚Üí Research ‚Üí Verification)", value=True
        )
    else:
        st.info("–ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–º–æ–¥—É–ª—å agents.workflow –Ω–µ –Ω–∞–π–¥–µ–Ω).")
        mas_mode = False

    st.divider()

    st.subheader("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    st.caption(f"–ü—É—Ç—å –∫ –ë–î: `{settings.CHROMA_DB_PATH}`")

    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
    if INDEX_AVAILABLE:
        if st.button("‚ôªÔ∏è –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É", use_container_width=True):
            with st.spinner("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è‚Ä¶ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"):
                try:
                    index_module.main()
                    # –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                    load_resources.clear()
                    st.success("–ì–æ—Ç–æ–≤–æ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
    else:
        st.caption("–ú–æ–¥—É–ª—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    st.divider()

    st.subheader("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    show_sources_n = st.slider("–°–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å", 3, 20, 8, 1)
    agent_docs_k = st.slider("–°–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–¥–∞–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞–º", 4, 16, 8, 1)

    st.divider()
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", use_container_width=True):
        st.session_state.pop("messages", None)
        st.session_state.pop("last_answer", None)
        st.rerun()


# =========================
#     RESOURCE LOADING
# =========================
@st.cache_resource(show_spinner=False)
def load_resources():
    """
    –ì—Ä—É–∑–∏–º –æ–¥–∏–Ω —Ä–∞–∑:
      - –≥–∏–±—Ä–∏–¥–Ω—É—é RAG-—Ü–µ–ø–æ—á–∫—É (retriever + LLM)
      - MAS workflow (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ë–î
    if not os.path.exists(settings.CHROMA_DB_PATH) or not os.listdir(
        settings.CHROMA_DB_PATH
    ):
        st.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python index.py' –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è.")
        return None, None

    try:
        chain, retriever = create_final_hybrid_chain()
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ RAG-—Ü–µ–ø–æ—á–∫–∏: {e}")
        return None, None

    wf = AgentWorkflow() if MAS_AVAILABLE else None
    return (chain, retriever, wf)


loaded = load_resources()
if not loaded:
    st.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ‚Ä¶")
    st.stop()

rag_chain, hybrid_retriever, workflow = loaded

# =========================
#     CHAT HISTORY INIT
# =========================
if "messages" not in st.session_state:
    st.session_state.messages = [
        {
            "role": "assistant",
            "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –°–ù–∏–ü/–ì–û–°–¢/–û–¢/–ü–ë. "
            "–Ø –æ—Ç–≤–µ—á–∞—é —Å—Ç—Ä–æ–≥–æ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏.",
        }
    ]

# –†–µ–Ω–¥–µ—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é
for m in st.session_state.messages:
    with st.chat_message(m["role"]):
        st.markdown(m["content"])

# =========================
#       CHAT INPUT
# =========================
user_query = st.chat_input(
    "–°–ø—Ä–æ—Å–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —à–∏—Ä–∏–Ω–µ —ç–≤–∞–∫—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π?¬ª"
)
if user_query:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.session_state.messages.append({"role": "user", "content": user_query})
    with st.chat_message("user"):
        st.markdown(user_query)

    # –í–µ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    with st.chat_message("assistant"):
        if mas_mode and workflow:
            # --- MAS MODE ---
            with st.spinner("–ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å ‚Üí –∏—Å—Å–ª–µ–¥—É—é ‚Üí –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É—é‚Ä¶"):
                try:
                    # –û—Ç–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    docs_for_agents = hybrid_retriever.invoke(user_query)[:agent_docs_k]
                    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–≤–æ–∏–º workflow: –æ–Ω —Å–∞–º –≤—ã–∑—ã–≤–∞–µ—Ç retriever –≤–Ω—É—Ç—Ä–∏,
                    # –Ω–æ –º—ã –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º –∏ —Å–æ–∫—Ä–∞—Ç–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    result = workflow.full_pipeline(
                        question=user_query, retriever=hybrid_retriever
                    )

                    answer = result.get("draft_answer", "").strip()
                    verification = result.get("verification_report", "").strip()

                    if not answer:
                        answer = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."

                    st.markdown(answer)
                    # –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                    st.session_state.last_answer = answer

                    # –ü–∞–Ω–µ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    with st.expander("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞", expanded=True):
                        if verification:
                            st.markdown(verification)
                        else:
                            st.caption("–ù–µ—Ç –æ—Ç—á—ë—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ MAS-–ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
                    answer = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        else:
            # --- RAG MODE (—Å—Ç—Ä–∏–º–∏–Ω–≥) ---
            try:
                with st.spinner("–ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç‚Ä¶"):
                    response_text = st.write_stream(
                        rag_chain.stream(
                            {
                                "question": user_query,
                                "chat_history": st.session_state.get("messages", []),
                            }
                        )
                    )
                st.session_state.last_answer = response_text
                answer = response_text
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ RAG-—Ü–µ–ø–æ—á–∫–∏: {e}")
                answer = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (–æ–±—â–∏–µ –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤)
        try:
            retrieved_docs = hybrid_retriever.invoke(user_query)[:show_sources_n]
        except Exception:
            retrieved_docs = []

        if retrieved_docs:
            with st.expander(
                f"üîé –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Ç–æ–ø-{len(retrieved_docs)})", expanded=False
            ):
                for i, doc in enumerate(retrieved_docs, start=1):
                    src = (
                        doc.metadata.get("source")
                        or doc.metadata.get("file_path")
                        or "N/A"
                    )
                    section = (
                        doc.metadata.get("section") or doc.metadata.get("header") or ""
                    )
                    preview = doc.page_content[:500].strip().replace("\n", " ")
                    st.markdown(
                        f"**{i}. –ò—Å—Ç–æ—á–Ω–∏–∫:** `{src}`  "
                        + (f" ¬∑ *{section}*" if section else "")
                    )
                    st.code(preview, language="markdown")
                    st.divider()
        else:
            st.caption("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "assistant", "content": answer})
