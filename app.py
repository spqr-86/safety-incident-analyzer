import os
import sys
import streamlit as st

# --- –£–º–Ω—ã–π FIX –¥–ª—è ChromaDB/SQLite3 –≤ –æ–±–ª–∞–∫–µ ---
if os.path.exists("/home/adminuser/venv/bin/python"):
    __import__('pysqlite3')
    sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')
# -----------------------------------------

import config
from src.chain import create_final_rag_chain # <-- –ò–∑–º–µ–Ω–∏–ª–∏ –∏–º–ø–æ—Ä—Ç!

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="AI Safety Compliance Assistant", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ AI Safety Compliance Assistant")
st.caption(f"–í–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –ú–æ–¥–µ–ª—å: {config.MODEL_NAME}")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ---
@st.cache_resource
def load_resources():
    if not os.path.exists(config.CHROMA_DB_PATH) or not os.listdir(config.CHROMA_DB_PATH):
        st.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python index.py' –¥–ª—è –µ–µ —Å–æ–∑–¥–∞–Ω–∏—è.")
        return None, None
    try:
        chain, retriever = create_final_rag_chain()
        return chain, retriever
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        return None, None

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
rag_chain, retriever = load_resources()

if rag_chain and retriever:
    if "messages" not in st.session_state:
        st.session_state.messages = [{"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏?"}]

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    if user_query := st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        st.session_state.messages.append({"role": "user", "content": user_query})
        with st.chat_message("user"):
            st.markdown(user_query)

        with st.chat_message("assistant"):
            # --- –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ, –ù–ê–î–ï–ñ–ù–£–Æ –õ–û–ì–ò–ö–£ ---
            try:
                retrieved_docs = retriever.invoke(user_query)
            except Exception:
                retrieved_docs = []
            
            # –ù–∞—Å—Ç–æ—è—â–∏–π —Å—Ç—Ä–∏–º–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é st.write_stream
            response = st.write_stream(
                rag_chain.stream({
                    "question": user_query,
                    "chat_history": st.session_state.get("messages", [])
                })
            )

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
            if retrieved_docs:
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏"):
                    for doc in retrieved_docs:
                        # ... (–∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ)
                        st.text(doc.page_content) # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
                        st.caption(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {doc.metadata.get('source', 'N/A')}")
                        st.divider()

        st.session_state.messages.append({"role": "assistant", "content": response})
else:
    st.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ...")