# app.py

import streamlit as st
import os
import config  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—É—Ç—è–º
from dotenv import load_dotenv
from src.chain import create_rag_chain
from src.vector_store import load_vector_store

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="AI Safety Compliance Assistant",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("ü§ñ AI Safety Compliance Assistant")
st.caption(f"–í–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –ú–æ–¥–µ–ª—å: {config.MODEL_NAME}")

# --- –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ---
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –∏ –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∫–µ—à–µ.
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –Ω–µ –±—É–¥–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∏ –±–∞–∑—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
@st.cache_resource
def load_resources():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç RAG-—Ü–µ–ø–æ—á–∫—É –∏ —Ä–µ—Ç—Ä–∏–≤–µ—Ä.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(config.CHROMA_DB_PATH) or not os.listdir(config.CHROMA_DB_PATH):
        st.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'python index.py' –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –¥–ª—è –µ–µ —Å–æ–∑–¥–∞–Ω–∏—è.")
        return None, None
    
    try:
        rag_chain = create_rag_chain()
        # –ù–∞–º –Ω—É–∂–µ–Ω —Ä–µ—Ç—Ä–∏–≤–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        vector_store = load_vector_store()
        retriever = vector_store.as_retriever(search_kwargs={"k": 3})
        return rag_chain, retriever
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ RAG-—Ü–µ–ø–æ—á–∫–∏: {e}")
        return None, None

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
rag_chain, retriever = load_resources()

if rag_chain and retriever:
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
    user_query = st.text_input(
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–æ–≤—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ —á–µ—Ä—Ç–µ–∂–∞—Ö?"
    )

    if user_query:
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã..."):
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Ü–µ–ø–æ—á–∫–∏
            final_answer = rag_chain.invoke(user_query)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞
            retrieved_docs = retriever.invoke(user_query)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
            st.markdown("### –û—Ç–≤–µ—Ç:")
            st.info(final_answer)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
            with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"):
                for i, doc in enumerate(retrieved_docs):
                    st.subheader(f"–ò—Å—Ç–æ—á–Ω–∏–∫ #{i+1}")
                    st.write(f"**–§–∞–π–ª:** {doc.metadata.get('source', 'N/A')}")
                    st.write(f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞:** {doc.metadata.get('page', 0) + 1}") # +1 –¥–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
                    st.write("**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:**")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.text –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    st.text(doc.page_content)
else:
    st.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
